@using Microsoft.AspNetCore.Identity
@using PMS.Infrastructure.Entities
@using PMS.Service.Services.Interfaces

@inject UserManager<User> UserManager
@inject IEmployeeService EmployeeService

@{
	var user = await UserManager.GetUserAsync(User);
	var email = user?.Email;
	var employee = EmployeeService.GetEmployeeByEmail(email!);
}
<div class=topbar>
	<a href="@Url.Action("Index", "Employee", new { id = employee.Id }, null)">
		<img class="ellipse_1" src="@employee.ProfilePicture"
			onerror="this.src='/images/profile.png'" alt="Profile Picture">
	</a>
	<span class="name">@ViewData["Title"]</span>
	<div class=filter>
		<span class="this_week">This week</span>
		<div class="vector_14">
			<span class="material-symbols-outlined">
				expand_more
			</span>
		</div>
	</div>
	<div class=notif>
		<span class="material-symbols-outlined">
			notifications
		</span>
	</div>

	<div class="search-container">
		<form id="search-form">
			<input type="text" id="search-input" name="query" placeholder="Search...">
		</form>
		<div id="search-results"></div>
	</div>

	<a class=questions asp-area="" asp-controller="Info" asp-action="Index">
		<span class="material-symbols-outlined">
			help
		</span>
	</a>
</div>

<script>
	const searchInput = document.getElementById('search-input');
	const searchResults = document.getElementById('search-results');

	searchInput.addEventListener('input', () => {
		const query = searchInput.value;
		if (query.trim() === '') {
			hideSearchResults();
		} else {
			search(query);
		}
	});

	async function search(query) {
		const res = await fetch(`http://localhost:5047/dashboard/search?query=${query}`);
		const body = res.body;
		const reader = body.getReader();
		let totalData = '';
		while (true) {
			const { done, value } = await reader.read();
			if (done) {
				break;
			}
			totalData += new TextDecoder().decode(value);
		}
		const output = JSON.parse(totalData);

		let resultHtml = '<ul>';
		for (const result of output) {
			resultHtml += `<li><a href="${result.url}">${result.name}</a><p>${result.type}</p</li>`;
		}
		resultHtml += '</ul>';

		searchResults.innerHTML = `<p>Search results for "${query}":</p>${resultHtml}`;
		showSearchResults();
	}


	function showSearchResults() {
		searchResults.style.display = 'block';
	}

	function hideSearchResults() {
		searchResults.style.display = 'none';
	}

</script>

<style>
	.topbar {
		width: 1127px;
		height: 121px;
		position: inherit;
		left: 1px;
		top: 0px;
	}

	input:focus {
        outline: none;
        border-color: var(--primary-color);
    }

	.ellipse_1 {
		position: inherit;
		float: right;
		right: 0;
		top: 0;
		width: 40px;
		height: 40px;
		border-radius: 50%;
		margin-right: 10px;
		background-color: var(--third-color);
		background-position: center;
		background-size: cover;
	}

	.name {
		color: var(--text-color);
		width: 200px;
		height: 50px;
		position: inherit;
		left: 0px;
		top: 77px;
		font-family: Poppins;
		text-align: left;
		font-size: 29px;
		letter-spacing: 0;
	}

	.filter {
		width: 96px;
		height: 24px;
		position: inherit;
		left: 1025px;
		top: 89px;
	}

	.this_week {
		color: var(--text-color);
		width: 77px;
		height: 24px;
		position: inherit;
		left: 0px;
		top: 0px;
		font-family: Poppins;
		text-align: center;
		font-size: 16px;
		letter-spacing: 0;
	}

	.vector_14 {
		width: 11px;
		height: 5px;
		position: inherit;
		left: 80px;
		top: 0px;
	}

	.notif {
		color: var(--default-color);
		width: 18px;
		height: 19.996456146240234px;
		position: inherit;
		left: 1000px;
		top: 6px;
	}

	.questions {
		width: 20px;
		height: 20px;
		position: inherit;
		left: 1037px;
		top: 6px;
	}

	/* Search container */
	.search-container {
		position: relative;
		width: 950px;
	}

	form #search-form{
		background-color: var(--secondary-color);
		border: none;
	}

	/* Search input */
	#search-input {
		width: 100%;
		padding: 12px 20px;
		font-size: 16px;
		border: none;
		border-radius: 4px;
		color: var(--text-color);
		background-color: var(--secondary-color);
	}

	/* Search results */
	#search-results {
		position: absolute;
		display: none;
		top: 100%;
		left: 0;
		width: 100%;
		max-height: 200px;
		overflow-y: auto;
		background-color: var(--third-color);
		border-top: none;
		z-index: 1;
		padding: 10px;
		box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
	}

	#search-results::-webkit-scrollbar-thumb {
		background-color: var(--secondary-color);
		border-radius: 10px;
	}

	#search-results::-webkit-scrollbar {
		width: 0.3em;
		background-color: var(--primary-color);
	}

	#search-results p {
		font-size: 10px;
		color: var(--default-color);
		font-weight: bold;
		margin-bottom: 10px;
	}

	#search-results ul {
		list-style: none;
		margin: 0;
		padding: 0;
	}

	#search-results li {
		margin-bottom: 5px;
	}

	#search-results li a {
		display: block;
		font-size: 14px;
		color: var(--text-color);
		text-decoration: none;
	}

	#search-results li a:hover {
		text-decoration: underline;
	}
</style>