@using PMS.Infrastructure.Enums
@using PMS.Service.ViewModels.Employee;

@{
    var employees = ViewData["employees"] as IEnumerable<EmployeeViewModel>;
    var userEmployee = ViewData["employee"] as EmployeeViewModel;
    var projectId = ViewData["projectId"] as string;
}

<div class="popup-form" id="add-task-form">
    <form method="post" action="/tasks">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" placeholder="Enter task name">

        <label for="description">Description:</label>
        <textarea id="description" name="description" placeholder="Enter task description"></textarea>

        <label for="task-type">Task Type:</label>
        <select id="task-type" name="taskType">
            <option value="">Select the task type</option>
            @foreach (var type in Enum.GetValues(typeof(PTaskType)))
            {
                <option value="@type.ToString()">@type.ToString()
                </option>
            }
        </select>

        <label for="assigned-to">Assigned To:</label>
        <select id="assigned-to" name="assignedToId">
            @foreach (var employee in employees)
            {
                if (userEmployee.UserName != employee.UserName)
                {
                    <option value="@employee.Id">@employee.UserName
                    </option>
                }
            }
        </select>

        <input type="hidden" name="assignedFromId" value="@userEmployee.Id">
        <input type="hidden" name="projectId" value="@projectId">

        <label for="status">Status:</label>
        <select id="status" name="status">
            @foreach (var status in Enum.GetValues(typeof(PTaskStatus)))
            {
                <option value="@status.ToString()">@status.ToString()
                </option>
            }
        </select>

        <div class="buttons">
            <span id="closeBtn" class="material-symbols-outlined">
                close
            </span>

            <button type="submit" class="myBtn">
                <span class="material-symbols-outlined">
                    save
                </span>
            </button>
        </div>
    </form>
</div>

<style>
    .popup-form {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: var(--third-color);
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.3);
        z-index: 9999;
    }

    #closeBtn {
        cursor: pointer;
    }

    .buttons {
        margin: 0 auto;
        position: relative;
        text-align: center;
    }

    .popup-form label {
        display: block;
        margin-bottom: 5px;
    }

    button.myBtn {
        border: none;
        background-color: inherit;
    }

    .popup-form input[type="text"],
    .popup-form textarea,
    .popup-form select {
        display: block;
        width: 100%;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 5px;
        border: none;
        box-shadow: inset 0px 2px 5px rgba(0, 0, 0, 0.1);
    }

    .popup-form select option {
        color: var(--default-color);
    }
</style>

<script>
    const close = document.getElementById("closeBtn");

    close.addEventListener('click', () => {
        location.reload();
    })
</script>