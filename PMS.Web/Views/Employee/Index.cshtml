@using Microsoft.AspNetCore.Mvc.Localization
@using PMS.Service.ViewModels.Employee;
@using PMS.Service.ViewModels.Project;
@using PMS.Service.ViewModels.Skill;

@inject IViewLocalizer Localizer

@model EmployeeViewModel

@{
    List<ProjectViewModel> projects = ViewBag.Projects;
    List<SkillViewModel> skills = ViewBag.Skills;
    List<SkillViewModel> allSkills = ViewBag.AllSkills;
    List<string> filteredSkills = ViewBag.SkillsName;
}

@{
    ViewData["Title"] = "Employee";
}

<div class="boardmenu">
    <div class="container">
        <h1>@Localizer["HeaderEmployee"]</h1>

        <form id="profilePictureForm" action="/employees" method="post" enctype="multipart/form-data">

            @Html.AntiForgeryToken()
            <input type="hidden" name="profilePicture" value="@Model.ProfilePicture" />

            <label for="mediaFile" class="profile-picture-label">
                <img src="@Model.ProfilePicture" onerror="this.src='/images/profile.png';"
                    onmouseover="this.src='/images/upload.png';" onmouseout="this.src='@Model.ProfilePicture';"
                    alt="Profile Picture" class="profile-picture" style="cursor: pointer;">
            </label>

            <input id="mediaFile" type="file" name="mediaFile" style="display: none;" accept="image/*"
                onchange="document.getElementById('profilePictureForm').submit();">
            <input type="hidden" name="employeeId" value="@Model.Id">
        </form>

        <a id="edit">
            <span class="material-symbols-outlined">
                edit
            </span>
        </a>

        <form id="edit-form" method="post" enctype="multipart/form-data" style="display:none;">

            <input type="hidden" name="id" value="@Model.Id">
            <input type="hidden" name="profilePicture" value="@Model.ProfilePicture" />
            <div class="card-body">
                <div class="row">
                    <div class="col-sm-6 col-lg-6">
                        <h2>@Localizer["HeaderName"]</h2>
                        <input type="text" name="username" value="@Model.UserName">
                    </div>

                    <div class="col-sm-6 col-lg-6">
                        <h2>@Localizer["HeaderName"]</h2>
                        <input type="text" name="firstname" value="@Model.FirstName">
                    </div>


                    <div class="col-sm-6 col-lg-6">
                        <h2>@Localizer["HeaderName"]</h2>
                        <input type="text" name="lastname" value="@Model.LastName">
                    </div>

                    <div class="col-sm-6 col-lg-6">
                        <h2>@Localizer["HeaderPosition"]</h2>
                        <input type="text" name="position" name="position" value="@Model.Position">
                    </div>

                    <div class="col-sm-6 col-lg-6">
                        <h2>@Localizer["HeaderEmail"]</h2>
                        <input type="email" name="email" name="email" value="@Model.Email">
                    </div>

                    <div class="col-sm-6 col-lg-6">
                        <h2>@Localizer["HeaderNumber"]</h2>
                        <input type="tel" name="phoneNumber" value="@Model.PhoneNumber">
                    </div>
                </div>

                <h2>@Localizer["HeaderDesc"]</h2>
                <textarea name="description" name="description">@Model.Description</textarea>

                <h2>@Localizer["HeaderSkills"]</h2>
                <select name="element-select" onchange="addToList()">
                    <option value="">Select a skill</option>
                    @foreach (var skill in allSkills)
                    {
                        <option value=@skill.Name style="background-color: @skill.ColorCode;">@skill.Name</option>
                    }
                </select>

                <div id="list-container" class="list">
                    @foreach (var skill in skills)
                    {
                        <div class="skill" style="background-color: @skill.ColorCode">@skill.Name</div>
                    }
                </div>

                <input type="hidden" name="skills" id="selected-skills" value="" />

                <button type="submit" class="myBtn">
                    <span class="material-symbols-outlined">
                        save
                    </span>
                </button>
                <a id="cancel">
                    <span class="material-symbols-outlined">
                        cancel
                    </span>
                </a>
            </div>
        </form>

        <div id="popup-container"></div>

        <div class="editable">
            <div class="card-body">
                <div class="row">
                    <div class="col-sm-6 col-lg-6">
                        <h2>@Localizer["HeaderName"]</h2>
                        <p>@Model.UserName</p>
                    </div>

                    <div class="col-sm-6 col-lg-6">
                        <h2>@Localizer["HeaderName"]</h2>
                        <p>@Model.FirstName</p>
                    </div>


                    <div class="col-sm-6 col-lg-6">
                        <h2>@Localizer["HeaderName"]</h2>
                        <p>@Model.LastName</p>
                    </div>


                    <div class="col-sm-6 col-lg-6">
                        <h2>@Localizer["HeaderPosition"]</h2>
                        <p>@Model.Position</p>
                    </div>

                    <div class="col-sm-6 col-lg-6">
                        <h2>@Localizer["HeaderEmail"]</h2>
                        <p>@Model.Email</p>
                    </div>

                    <div class="col-sm-6 col-lg-6">
                        <h2>@Localizer["HeaderNumber"]</h2>
                        <p>@Model.PhoneNumber</p>
                    </div>
                </div>


                <h2>@Localizer["HeaderDesc"]</h2>
                <p>@Model.Description</p>

                <h2>@Localizer["HeaderSkills"]</h2>
                <ul class="list">
                    @{
                        if (skills.Count != 0)
                        {
                            foreach (var skill in skills)
                            {
                                <li class="skill" style="background-color: @skill.ColorCode;">@skill.Name</li>
                            }
                        }
                        else
                        {
                            <p class="nocontent">No Skills</p>
                        }
                    }
                </ul>

                <h2>@Localizer["HeaderProjects"]</h2>
                <ul class="list">
                    @{
                        if (projects.Count != 0)
                        {
                            foreach (var project in projects)
                            {
                                @await Html.PartialAsync("_ProjectSmallPartial", project)
                            }
                        }
                        else
                        {
                            <p class="nocontent">No Projects</p>
                        }
                    }
                </ul>
            </div>
        </div>
    </div>
</div>


<script>
    const editButton = document.getElementById('edit');
    const editForm = document.getElementById('edit-form');
    const editableFields = document.querySelectorAll('.editable');
    const cancel = document.getElementById('cancel');

    editForm.addEventListener("submit", function (event) {
        event.preventDefault();
        submitForm();
    });

    editButton.addEventListener('click', () => {
        editForm.style.display = 'block';
        editableFields.forEach(field => field.style.display = 'none');
        editButton.style.display = 'none'
    });

    cancel.addEventListener('click', () => {
        location.reload();
    })

    const listContainer = document.getElementById('list-container');
    let list = [];

    function addToList() {
        const selectElement = document.querySelector('select[name="element-select"]');
        const selectedOption = selectElement.options[selectElement.selectedIndex];
        const backgroundColor = selectedOption.style.backgroundColor;
        const selectedValue = selectElement.value;
        const content = { selectedValue, backgroundColor };
        let data = @Html.Raw(Json.Serialize(filteredSkills));
        if (data) {
            const uniqueX = new Set(data);
            console.log("uniqueX ", uniqueX);
            uniqueX.forEach(x => {
                const obj = { selectedValue: x, backgroundColor: '#cccccc' };
                if (!list.some(content => content.selectedValue === x)) {
                    list.push(obj);
                }
            });
        }
        if (selectedValue) {
            console.log("select ", selectedValue)
            if (!list.some(content => content.selectedValue === selectedValue)) {
                list.push(content);
                let firstParams = list.map(obj => Object.values(obj)[0]);
                document.querySelector('#selected-skills').value = firstParams;
            }

            displayList(list, backgroundColor);
        }
    }

    function submitForm() {
        var formData = new FormData(editForm);
        fetch("/employees/update", {
            method: "POST",
            body: formData
        })
            .then(function (response) {
                if (response.ok) {
                    showSuccessPopUp()
                } else {
                    showErrorPopUp()
                }
            })
            .catch(function (error) {
                showErrorPopUp()
            });
    }

    function showSuccessPopUp() {
        localStorage.setItem("showSuccessPopup", "true");
        location.reload();
    }

    function showErrorPopUp() {
        localStorage.setItem("showErrorPopup", "true");
        location.reload();
    }

    function checkForPopup() {
        var showSuccessPopu = localStorage.getItem("showSuccessPopup");
        var showErrorPopu = localStorage.getItem("showErrorPopup");
        if (showSuccessPopu === "true") {
            showSuccess("Successfully updated!");
            localStorage.removeItem("showSuccessPopup");
            localStorage.removeItem("showErrorPopup");
        }
        else if (showErrorPopu === "true") {
            showError("Something went wrong!");
            localStorage.removeItem("showSuccessPopup");
            localStorage.removeItem("showErrorPopup");
        }
    }

    window.onload = checkForPopup();


    function showSuccess(message) {
        console.log("hi")
        var popup = document.getElementById("popup-container");
        popup.innerHTML = message;
        popup.style.backgroundColor = '#28a745'
        popup.style.opacity = "0";
        popup.style.display = "block";
        setTimeout(function () {
            popup.style.opacity = "1";
        }, 100);

        setTimeout(function () {
            popup.style.opacity = "0";
            setTimeout(function () {
                popup.style.display = "none";
            }, 500);
        }, 3000);
    }

    function showError(message) {
        console.log("hi")
        var popup = document.getElementById("popup-container");
        popup.innerHTML = message;
        popup.style.backgroundColor = '#dc3545'
        popup.style.opacity = "0";
        popup.style.display = "block";
        setTimeout(function () {
            popup.style.opacity = "1";
        }, 100);

        setTimeout(function () {
            popup.style.opacity = "0";
            setTimeout(function () {
                popup.style.display = "none";
            }, 500);
        }, 3000);
    }



    function displayList(backgroundColor) {
        listContainer.innerHTML = '';
        list.forEach((element) => {
            const elementDiv = document.createElement('div');
            elementDiv.textContent = element.selectedValue;
            elementDiv.style.backgroundColor = element.backgroundColor;
            elementDiv.classList.add('skill');
            listContainer.appendChild(elementDiv);
        });
    }

</script>

<style>
    .container {
        max-width: 800px;
        margin: 0 auto;
        position: relative;
        padding: 20px;
        background-color: var(--third-color);
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        border-radius: 5px;
        margin-top: 20px;
    }

    #popup-container {
        background-color: #fff;
        border-radius: 5px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);
        padding: 20px;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 9999;
        display: none;
        opacity: 0;
        transition: opacity 0.5s ease;
    }

    a#cancel {
        color: var(--text-color);
        cursor: pointer;
        position: absolute;
        top: 0;
        right: 0;
        margin: 25px;
    }

    .myBtn {
        border: none;
        background-color: inherit;
    }

    select {
        font-size: 16px;
        padding: 8px;
        border-radius: 4px;
        border: 1px solid #ccc;
        background-color: white;
    }

    select option {
        font-size: 16px;
        padding: 8px;
        background-color: white;
        color: var(--default-color);
    }

    form#profilePictureForm {
        width: max-content;
        margin: 0 auto;
    }

    label {
        display: block;
    }

    a#edit {
        color: var(--text-color);
        cursor: pointer;
        position: absolute;
        top: 0;
        right: 0;
        margin: 25px;
    }

    .nocontent {
        color: var(--default-color);
    }

    h1 {
        font-size: 36px;
        margin: 0;
        margin-bottom: 20px;
        color: var(--default-color);
        text-align: center;
    }

    h2 {
        font-size: 24px;
        margin: 0;
        margin-bottom: 10px;
        margin-top: 5px;
        color: var(--default-color);
        text-align: center;
    }

    #edit-form select:focus,
    #edit-form textarea:focus,
    #edit-form input:focus {
        outline: none;
        border-color: #eee;
    }

    #edit-form select,
    #edit-form input,
    #edit-form textarea {
        color: black;
        border: 1px solid #ccc;
        background-color: var(--default-color);
        font-size: 16px;
        line-height: 1.5;
        margin: 0;
        margin-bottom: 20px;
        text-align: center;
        width: 250px;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        border: none;
        color: var(--primary-color);
        font-family: "Montserrat", sans-serif;
    }

    p {
        color: var(--text-color);
        font-size: 16px;
        line-height: 1.5;
        margin: 0;
        margin-bottom: 20px;
        text-align: center;
    }

    form#edit-form {
        display: block;
        text-align: -webkit-center;
    }

    ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .section-title {
        font-size: 20px;
        font-weight: bold;
        margin-bottom: 10px;
        color: var(--default-color);
    }

    .email {
        display: block;
        color: var(--text-color);
        margin-bottom: 10px;
    }

    .phone-number {
        display: block;
        color: var(--text-color);
        margin-bottom: 10px;
    }

    .list {
        margin: 20px;
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        justify-content: center;
    }

    .skill {
        color: var(--primary-color);
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 14px;
        margin-right: 10px;
        margin-bottom: 10px;
        text-transform: uppercase;
    }

    .profile-picture {
        display: block;
        margin: 0 auto;
        border-radius: 50%;
        background-color: var(--secondary-color);
        border: 5px solid var(--third-color);
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        width: 150px;
        height: 150px;
    }
</style>