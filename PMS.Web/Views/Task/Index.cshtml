@using PMS.Infrastructure.Enums
@using PMS.Service.ViewModels.PTask;
@using PMS.Service.ViewModels.Employee;

@model PTaskViewModel

@{
    string projectName = ViewBag.ProjectName;
    List<EmployeeViewModel> employees = ViewBag.Employees;
    string assignedToName = employees.Find(x => x.Id == Model.AssignedToId).UserName;
    var projectId = ViewData["projectId"] as string;
}

<div class="boardmenu">
    <div class="container">
        <span class="material-symbols-outlined" onclick="goBack()">
            arrow_back
        </span>
        <p class="projectName">@projectName</p>
        <h1>Task Form</h1>
        <form id="taskform" method="post" action="/tasks/update">
            <input type="hidden" name="id" value="@Model.Id">
            <label for="name">Name:</label>
            <input type="text" id="name" name="name" value="@Model.Name" placeholder="Enter task name">

            <label for="description">Description:</label>
            <textarea id="description" name="description"
                placeholder="Enter task description">@Model.Description</textarea>

            <label for="task-type">Task Type:</label>
            <select id="task-type" name="taskType">
                <option value="@Model.TaskType">@Model.TaskType</option>
                @foreach (var type in Enum.GetValues(typeof(PTaskType)))
                {
                    if (Model.TaskType.ToString() != type.ToString())
                    {
                        <option value="@type.ToString()">@type.ToString()
                        </option>
                    }
                }
            </select>

            <label for="assigned-to">Assigned To:</label>
            <select id="assigned-to" name="assignedToId">
                <option value="@Model.AssignedToId">@assignedToName</option>
                @foreach (var employee in employees)
                {
                    if (Model.AssignedToId != employee.Id)
                    {
                        <option value="@employee.Id">@employee.UserName
                        </option>
                    }
                }
            </select>

            <input type="hidden" name="assignedFromId" value="@Model.AssignedFromId">
            <input type="hidden" name="projectId" value="@projectId">

            <label for="status">Status:</label>
            <select id="status" name="status">
                <option value="@Model.Status">@Model.Status</option>
                @foreach (var status in Enum.GetValues(typeof(PTaskStatus)))
                {
                    if (Model.Status.ToString() != status.ToString())
                    {
                        <option value="@status.ToString()">@status.ToString()
                        </option>
                    }
                }
            </select>

            <button type="submit" class="myBtn">
                <span class="material-symbols-outlined">
                    save
                </span>
            </button>
        </form>
    </div>
</div>

<style>
    #taskform label {
        display: block;
        margin-bottom: 10px;
        font-weight: bold;
    }

    p.projectName {
        color: var(--default-color);
        font-size: 18px;
        margin: -1px auto auto 30px;
        position: absolute;
    }

    .container label {
        color: var(--default-color);
    }

    .container h1 {
        color: var(--default-color);
        text-align: center;
    }

    .material-symbols-outlined {
        width: min-content;
        cursor: pointer;
    }

    #taskform input[type="text"],
    #taskform textarea,
    #taskform select {
        width: 100%;
        padding: 10px;
        border-radius: 5px;
        border: 1px solid #ccc;
        box-sizing: border-box;
        margin-bottom: 20px;
    }

    .container {
        margin: auto;
        display: grid;
        width: 50%;
        padding: 20px;
        background-color: var(--third-color);
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    } 

    .myBtn {
        border: none;
        background-color: inherit;
        display: block;
        margin: 0;
        margin-left: auto;
        margin-right: auto;
    }
</style>

<script>
    function goBack() {
        window.history.back();
    }
</script>